// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    AUTO GENERATED CODE     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package google

import (
	"fmt"
	"log"
	"reflect"
	"strings"
	"time"

	"github.com/hashicorp/terraform-plugin-sdk/v2/helper/schema"
)

func resourceGKEHubFeature() *schema.Resource {
	return &schema.Resource{
		Create: resourceGKEHubFeatureCreate,
		Read:   resourceGKEHubFeatureRead,
		Update: resourceGKEHubFeatureUpdate,
		Delete: resourceGKEHubFeatureDelete,

		Importer: &schema.ResourceImporter{
			State: resourceGKEHubFeatureImport,
		},

		Timeouts: &schema.ResourceTimeout{
			Create: schema.DefaultTimeout(4 * time.Minute),
			Update: schema.DefaultTimeout(4 * time.Minute),
			Delete: schema.DefaultTimeout(4 * time.Minute),
		},

		Schema: map[string]*schema.Schema{
			"description": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of this entity type to be displayed on the console.`,
			},
			"feature_id": {
				Type:        schema.TypeString,
				Required:    true,
				ForceNew:    true,
				Description: `The name of the feature to enable.`,
			},
			"authorizer_feature_spec": {
				Type:          schema.TypeBool,
				Optional:      true,
				ForceNew:      true,
				Description:   `Set this to true to enable the authorizer feature.`,
				ConflictsWith: []string{"multiclusteringress_feature_spec"},
			},
			"labels": {
				Type:        schema.TypeMap,
				Optional:    true,
				Description: `Labels to apply to this feature.`,
				Elem:        &schema.Schema{Type: schema.TypeString},
			},
			"multiclusteringress_feature_spec": {
				Type:     schema.TypeList,
				Optional: true,
				ForceNew: true,
				Description: `Fully-qualified member name which hosts the MultiClusterIngress CRD.
Example member name: 'projects/foo-proj/locations/global/memberships/bar'`,
				MaxItems: 1,
				Elem: &schema.Resource{
					Schema: map[string]*schema.Schema{
						"config_membership": {
							Type:        schema.TypeString,
							Optional:    true,
							ForceNew:    true,
							Description: `If this Membership is a Kubernetes API server hosted on GKE, this is a self link to its GCP resource.`,
						},
					},
				},
				ConflictsWith: []string{"authorizer_feature_spec"},
			},
			"name": {
				Type:        schema.TypeString,
				Computed:    true,
				Description: `The unique identifier of the feature.`,
			},
			"project": {
				Type:     schema.TypeString,
				Optional: true,
				Computed: true,
				ForceNew: true,
			},
		},
		UseJSONNumber: true,
	}
}

func resourceGKEHubFeatureCreate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	obj := make(map[string]interface{})
	descriptionProp, err := expandGKEHubFeatureDescription(d.Get("description"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("description"); !isEmptyValue(reflect.ValueOf(descriptionProp)) && (ok || !reflect.DeepEqual(v, descriptionProp)) {
		obj["description"] = descriptionProp
	}
	labelsProp, err := expandGKEHubFeatureLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(labelsProp)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}
	authorizerFeatureSpecProp, err := expandGKEHubFeatureAuthorizerFeatureSpec(d.Get("authorizer_feature_spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("authorizer_feature_spec"); !isEmptyValue(reflect.ValueOf(authorizerFeatureSpecProp)) && (ok || !reflect.DeepEqual(v, authorizerFeatureSpecProp)) {
		obj["authorizerFeatureSpec"] = authorizerFeatureSpecProp
	}
	multiclusteringressFeatureSpecProp, err := expandGKEHubFeatureMulticlusteringressFeatureSpec(d.Get("multiclusteringress_feature_spec"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("multiclusteringress_feature_spec"); !isEmptyValue(reflect.ValueOf(multiclusteringressFeatureSpecProp)) && (ok || !reflect.DeepEqual(v, multiclusteringressFeatureSpecProp)) {
		obj["multiclusteringressFeatureSpec"] = multiclusteringressFeatureSpecProp
	}

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}projects/{{project}}/locations/global/features?featureId={{feature_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Creating new Feature: %#v", obj)
	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "POST", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutCreate))
	if err != nil {
		return fmt.Errorf("Error creating Feature: %s", err)
	}

	// Store the ID now
	id, err := replaceVars(d, config, "projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	// Use the resource in the operation response to populate
	// identity fields and d.Id() before read
	var opRes map[string]interface{}
	err = gKEHubOperationWaitTimeWithResponse(
		config, res, &opRes, project, "Creating Feature", userAgent,
		d.Timeout(schema.TimeoutCreate))
	if err != nil {
		// The resource didn't actually create
		d.SetId("")
		return fmt.Errorf("Error waiting to create Feature: %s", err)
	}

	if err := d.Set("name", flattenGKEHubFeatureName(opRes["name"], d, config)); err != nil {
		return err
	}

	// This may have caused the ID to update - update it if so.
	id, err = replaceVars(d, config, "projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	log.Printf("[DEBUG] Finished creating Feature %q: %#v", d.Id(), res)

	return resourceGKEHubFeatureRead(d, meta)
}

func resourceGKEHubFeatureRead(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequest(config, "GET", billingProject, url, userAgent, nil)
	if err != nil {
		return handleNotFoundError(err, d, fmt.Sprintf("GKEHubFeature %q", d.Id()))
	}

	if err := d.Set("project", project); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}

	if err := d.Set("name", flattenGKEHubFeatureName(res["name"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}
	if err := d.Set("description", flattenGKEHubFeatureDescription(res["description"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}
	if err := d.Set("labels", flattenGKEHubFeatureLabels(res["labels"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}
	if err := d.Set("authorizer_feature_spec", flattenGKEHubFeatureAuthorizerFeatureSpec(res["authorizerFeatureSpec"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}
	if err := d.Set("multiclusteringress_feature_spec", flattenGKEHubFeatureMulticlusteringressFeatureSpec(res["multiclusteringressFeatureSpec"], d, config)); err != nil {
		return fmt.Errorf("Error reading Feature: %s", err)
	}

	return nil
}

func resourceGKEHubFeatureUpdate(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	obj := make(map[string]interface{})
	labelsProp, err := expandGKEHubFeatureLabels(d.Get("labels"), d, config)
	if err != nil {
		return err
	} else if v, ok := d.GetOkExists("labels"); !isEmptyValue(reflect.ValueOf(v)) && (ok || !reflect.DeepEqual(v, labelsProp)) {
		obj["labels"] = labelsProp
	}

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Updating Feature %q: %#v", d.Id(), obj)
	updateMask := []string{}

	if d.HasChange("labels") {
		updateMask = append(updateMask, "labels")
	}
	// updateMask is a URL parameter but not present in the schema, so replaceVars
	// won't set it
	url, err = addQueryParams(url, map[string]string{"updateMask": strings.Join(updateMask, ",")})
	if err != nil {
		return err
	}

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "PATCH", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return fmt.Errorf("Error updating Feature %q: %s", d.Id(), err)
	} else {
		log.Printf("[DEBUG] Finished updating Feature %q: %#v", d.Id(), res)
	}

	err = gKEHubOperationWaitTime(
		config, res, project, "Updating Feature", userAgent,
		d.Timeout(schema.TimeoutUpdate))

	if err != nil {
		return err
	}

	return resourceGKEHubFeatureRead(d, meta)
}

func resourceGKEHubFeatureDelete(d *schema.ResourceData, meta interface{}) error {
	config := meta.(*Config)
	userAgent, err := generateUserAgentString(d, config.userAgent)
	if err != nil {
		return err
	}

	billingProject := ""

	project, err := getProject(d, config)
	if err != nil {
		return fmt.Errorf("Error fetching project for Feature: %s", err)
	}
	billingProject = project

	url, err := replaceVars(d, config, "{{GKEHubBasePath}}projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return err
	}

	var obj map[string]interface{}
	log.Printf("[DEBUG] Deleting Feature %q", d.Id())

	// err == nil indicates that the billing_project value was found
	if bp, err := getBillingProject(d, config); err == nil {
		billingProject = bp
	}

	res, err := sendRequestWithTimeout(config, "DELETE", billingProject, url, userAgent, obj, d.Timeout(schema.TimeoutDelete))
	if err != nil {
		return handleNotFoundError(err, d, "Feature")
	}

	err = gKEHubOperationWaitTime(
		config, res, project, "Deleting Feature", userAgent,
		d.Timeout(schema.TimeoutDelete))

	if err != nil {
		return err
	}

	log.Printf("[DEBUG] Finished deleting Feature %q: %#v", d.Id(), res)
	return nil
}

func resourceGKEHubFeatureImport(d *schema.ResourceData, meta interface{}) ([]*schema.ResourceData, error) {
	config := meta.(*Config)
	if err := parseImportId([]string{
		"projects/(?P<project>[^/]+)/locations/global/features/(?P<feature_id>[^/]+)",
		"(?P<project>[^/]+)/(?P<feature_id>[^/]+)",
		"(?P<feature_id>[^/]+)",
	}, d, config); err != nil {
		return nil, err
	}

	// Replace import id for the resource id
	id, err := replaceVars(d, config, "projects/{{project}}/locations/global/features/{{feature_id}}")
	if err != nil {
		return nil, fmt.Errorf("Error constructing id: %s", err)
	}
	d.SetId(id)

	return []*schema.ResourceData{d}, nil
}

func flattenGKEHubFeatureName(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureDescription(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureLabels(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func flattenGKEHubFeatureAuthorizerFeatureSpec(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v != nil
}

func flattenGKEHubFeatureMulticlusteringressFeatureSpec(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	if v == nil {
		return nil
	}
	original := v.(map[string]interface{})
	if len(original) == 0 {
		return nil
	}
	transformed := make(map[string]interface{})
	transformed["config_membership"] =
		flattenGKEHubFeatureMulticlusteringressFeatureSpecConfigMembership(original["configMembership"], d, config)
	return []interface{}{transformed}
}
func flattenGKEHubFeatureMulticlusteringressFeatureSpecConfigMembership(v interface{}, d *schema.ResourceData, config *Config) interface{} {
	return v
}

func expandGKEHubFeatureDescription(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}

func expandGKEHubFeatureLabels(v interface{}, d TerraformResourceData, config *Config) (map[string]string, error) {
	if v == nil {
		return map[string]string{}, nil
	}
	m := make(map[string]string)
	for k, val := range v.(map[string]interface{}) {
		m[k] = val.(string)
	}
	return m, nil
}

func expandGKEHubFeatureAuthorizerFeatureSpec(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	if v == nil || !v.(bool) {
		return nil, nil
	}

	return struct{}{}, nil
}

func expandGKEHubFeatureMulticlusteringressFeatureSpec(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	l := v.([]interface{})
	if len(l) == 0 || l[0] == nil {
		return nil, nil
	}
	raw := l[0]
	original := raw.(map[string]interface{})
	transformed := make(map[string]interface{})

	transformedConfigMembership, err := expandGKEHubFeatureMulticlusteringressFeatureSpecConfigMembership(original["config_membership"], d, config)
	if err != nil {
		return nil, err
	} else if val := reflect.ValueOf(transformedConfigMembership); val.IsValid() && !isEmptyValue(val) {
		transformed["configMembership"] = transformedConfigMembership
	}

	return transformed, nil
}

func expandGKEHubFeatureMulticlusteringressFeatureSpecConfigMembership(v interface{}, d TerraformResourceData, config *Config) (interface{}, error) {
	return v, nil
}
